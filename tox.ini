# https://tox.readthedocs.io/en/latest/config.html

[tox]
requires =
    tox>4
env_list =
    fix,
    py311
    py310
    py39
    docs
    pkg_meta
skip_missing_interpreters = true
labels =
    test = py39, py310, py311, cov
    release = clean, check, package, upload

[testenv]
description = run the tests with pytest under {envname}
package = wheel
wheel_build_env = .pkg
allowlist_externals = git
pass_env = *
changedir = {toxinidir}
setenv =
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}{/}.coverage.{envname}}
    COVERAGE_PROCESS_START = {toxinidir}{/}pyproject.toml
extras =
    dev
commands =
    python -c "from pathlib import Path;Path(r'{envtmpdir}/pytest').mkdir(parents=True, exist_ok=True)"
    pytest {posargs: tests/unit tests/integration \
      --junitxml {toxworkdir}{/}junit.{envname}.xml \
      --cov {envsitepackagesdir}{/}pharaoh \
      --cov-config={toxinidir}{/}pyproject.toml \
      --no-cov-on-fail \
      --cov-report term-missing:skip-covered \
      --cov-context=test \
      --cov-report html:{envtmpdir}{/}htmlcov \
      --cov-report xml:{toxworkdir}{/}coverage.{envname}.xml \
      --basetemp="{envtmpdir}{/}pytest" \
      -n={env:PYTEST_XDIST_AUTO_NUM_WORKERS:auto} }
;    diff-cover --compare-branch {env:DIFF_AGAINST:origin/main} {toxworkdir}{/}coverage.{envname}.xml


[testenv:clean]
documentation = Cleans build and test artifacts
package = skip
commands =
    git clean -ffX .coverage*
    git clean -ffX build
    git clean -ffX src/*.egg-info
    git clean -ffX dist
    git clean -ffX tests
    git clean -ffX .pytest_cache
    git clean -ffX .mypy_cache
    git clean -ffX .ruff_cache


[testenv:fix]
description = format the code base to adhere to our styles, and complain about what we cannot do automatically
package = skip
deps =
    pre-commit
commands =
    - pre-commit install
    pre-commit run --all-files {posargs}


[testenv:docs]
package = editable
setenv =
    {[testenv]setenv}
    PYTHONPATH={toxinidir}/src{:}{toxinidir}
extras =
    docs
commands =
    python docs/cli/generate_cli_command_docs.py
    sphinx-build {posargs:-E} -W -b html docs dist/docs
    sphinx-build -b linkcheck docs dist/docs


[testenv:bumpversion]
documentation = Bumps the library version. Run "tox -e bumpversion -- --help" for further help.
                To bump the version for a major/minor/patch release, call "tox -e bumpversion -- major/minor/patch"
package = skip
deps =
    bump2version
commands =
    bump2version {posargs}


[testenv:pkg_meta]
description = check that the long description is valid
skip_install = true
deps =
    build[virtualenv]>=1.0.3
    check-wheel-contents>=0.5
    twine>=4.0.2
commands =
    python -m build -o {envtmpdir} -s -w .
    twine check {envtmpdir}{/}pharaoh_report*
    check-wheel-contents --no-config {envtmpdir}


[testenv:upload]
documentation =
    Releases artifacts generated by the package environment to Artifactory
package = skip
deps =
    {[testenv:pkg_meta]deps}
    twine
commands =
    python -m build -o {envtmpdir} -s -w .
    twine check {envtmpdir}{/}pharaoh_report*
    check-wheel-contents --no-config {envtmpdir}
    twine upload {envtmpdir}{/}pharaoh_report*
